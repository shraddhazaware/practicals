Blockchain Practicals


1.write a program in solidity to create student data use following constructors
 1.array
 2. fallback

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract StudentContract{
    struct Student{
        uint256 id;
        string name;
        uint256 age;
    }


    Student[] public studentArray;

    //function to add the student

    function addStudent(uint256 id,string memory name,uint256 age) public {
        studentArray.push(Student(id,name,age));
    }

    //getTotal number of students

    function getTotal() public view returns (uint256) {
        return studentArray.length;
    }

    //get student 

    function getStudent(uint256 index) public view returns (uint256,string memory,uint256){
        require(index <studentArray.length,"Invalid Index");
        Student memory student = studentArray[index];
        return (student.id,student.name,student.age);
    }

    receive() external payable {   //fallback function
        
     }

}


2.Write a program in solidity to create student data . Use Structures  // Same code s above just do not use fallback function
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract StudentContract{
    struct Student{
        uint256 id;
        string name;
        uint256 age;
    }


    Student[] public studentArray;

    //function to add the student

    function addStudent(uint256 id,string memory name,uint256 age) public {
        studentArray.push(Student(id,name,age));
    }

    //getTotal number of students

    function getTotal() public view returns (uint256) {
        return studentArray.length;
    }

    //get student 

    function getStudent(uint256 index) public view returns (uint256,string memory,uint256){
        require(index <studentArray.length,"Invalid Index");
        Student memory student = studentArray[index];
        return (student.id,student.name,student.age);
    }

    receive() external payable {
        
     }

}



3. Write a smart contract for bank account

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract BankAccount {
    address public owner;
    uint256 public balance;

    constructor() {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can perform this action");
        _;
    }

    function deposit(uint256 amount) public onlyOwner {
        require(amount > 0, "Deposit amount must be greater than zero");
        balance += amount;
    }

    function withdraw(uint256 amount) public onlyOwner {
        require(amount > 0, "Withdrawal amount must be greater than zero");
        require(amount <= balance, "Insufficient balance");
        balance -= amount;
    }

    function getBalance() public view returns (uint256) {
        return balance;
    }
}


