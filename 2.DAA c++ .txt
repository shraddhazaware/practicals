Assignment 1- Write recursive and non recursive program to display fibonacci series
1. Recursive Program cpp
#include <iostream>
using namespace std;

// Function to calculate the nth Fibonacci number recursively
int recurFibo(int n) {
    if (n <= 1)
        return n;
    else
        return recurFibo(n - 1) + recurFibo(n - 2);
}

int main() {
    int nterms;
    cout << "Enter the number of terms for the Fibonacci series: ";
    cin >> nterms;

    // Check if the number of terms is valid
    if (nterms <= 0) {
        cout << "Please enter a positive integer." << endl;
    } else {
        cout << "Fibonacci sequence:" << endl;
        for (int i = 0; i < nterms; i++) {
            cout << recurFibo(i) << " ";
        }
        cout << endl;
    }

    return 0;
}
 1.. recursive python
def recur_fibo(n):
   if n <=1
       return n
   else:
       return(recur_fibo(n-1) + recur_fibo(n-2))

nterms = 10   // Number to print fibonacci series

# check if the number of terms is valid
if nterms <= 0:
   print("Plese enter a positive integer")
else:
   print("Fibonacci sequence:")
   for i in range(nterms):
       print(recur_fibo(i))


2. Non Recursive cpp
#include <iostream>
using namespace std;

int main() {
    int a, b, n;
    cout << "Enter the first number of the series: ";
    cin >> a;
    cout << "Enter the second number of the series: ";
    cin >> b;
    cout << "Enter the number of terms needed: ";
    cin >> n;

    cout << a << " " << b << " ";

    while ((n - 2) > 0) {
        int c = a + b;
        a = b;
        b = c;
        cout << c << " ";
        n--;
    }

    cout << endl;

    return 0;
}

2. Non Recursive approach

a=int(input("Enter the first number of the series "))
b=int(input("Enter the second number of the series "))
n=int(input("Enter the number of terms needed "))
print(a,b,end=" ")
while((n-2)>0):
    c=a+b
    a=b
    b=c
    print(c,end=" ")
    n=n-1




Assignment 2-write program to implement huffman encoding using greedy method


#include <iostream>
#include <string>
#include <queue>
#include <map>

struct HuffmanNode {
    char data;
    int freq;
    HuffmanNode* left;
    HuffmanNode* right;
    HuffmanNode(char data, int freq) : data(data), freq(freq), left(nullptr), right(nullptr) {}
};

struct CompareNodes {
    bool operator()(HuffmanNode* a, HuffmanNode* b) {
        return a->freq > b->freq;
    }
};

void generateHuffmanCodes(HuffmanNode* root, std::string code, std::map<char, std::string>& codes) {
    if (root) {
        if (!root->left && !root->right) {
            codes[root->data] = code;
        }
        generateHuffmanCodes(root->left, code + "0", codes);
        generateHuffmanCodes(root->right, code + "1", codes);
    }
}

HuffmanNode* buildHuffmanTree(std::map<char, int>& freq) {
    std::priority_queue<HuffmanNode*, std::vector<HuffmanNode*>, CompareNodes> minHeap;

    for (auto& entry : freq) {
        minHeap.push(new HuffmanNode(entry.first, entry.second));
    }

    while (minHeap.size() > 1) {
        HuffmanNode* left = minHeap.top();
        minHeap.pop();
        HuffmanNode* right = minHeap.top();
        minHeap.pop();
        HuffmanNode* newNode = new HuffmanNode('$', left->freq + right->freq);
        newNode->left = left;
        newNode->right = right;
        minHeap.push(newNode);
    }

    return minHeap.top();
}

std::string encodeText(std::string text, std::map<char, std::string>& huffmanCodes) {
    std::string encodedText;
    for (char c : text) {
        encodedText += huffmanCodes[c];
    }
    return encodedText;
}

int main() {
    std::string input;
    std::cout << "Enter a text to encode: ";
    getline(std::cin, input);

    std::map<char, int> frequency;
    for (char c : input) {
        if (frequency.find(c) != frequency.end()) {
            frequency[c]++;
        } else {
            frequency[c] = 1;
        }
    }

    HuffmanNode* root = buildHuffmanTree(frequency);
    std::map<char, std::string> huffmanCodes;
    generateHuffmanCodes(root, "", huffmanCodes);

    std::string encodedText = encodeText(input, huffmanCodes);

    std::cout << "Huffman Codes:\n";
    for (auto& entry : huffmanCodes) {
        std::cout << entry.first << ": " << entry.second << "\n";
    }

    std::cout << "Encoded Text: " << encodedText << "\n";

    return 0;
}




Assignmnet 3- Write program to solve fractional knapsack problem using greedy method

#include <iostream>
#include <vector>
#include <algorithm>  // Include the <algorithm> header for 'sort'
using namespace std;

// Structure to represent an item with profit and weight
struct Item {
    int profit;
    int weight;
};

// Comparator function to sort items based on profit-to-weight ratio
bool compareItems(const Item& item1, const Item& item2) {
    return (static_cast<double>(item1.profit) / item1.weight) > (static_cast<double>(item2.profit) / item2.weight);
}

double fractionalKnapsack(int W, vector<Item>& items) {
    sort(items.begin(), items.end(), compareItems);

    double finalValue = 0.0;
    int n = items.size();

    for (int i = 0; i < n; i++) {
        if (items[i].weight <= W) {
            W -= items[i].weight;
            finalValue += items[i].profit;
        } else {
            finalValue += items[i].profit * static_cast<double>(W) / items[i].weight;
            break;
        }
    }

    return finalValue;
}

int main() {
    int n;
    cout << "Enter the number of items: ";
    cin >> n;

    vector<Item> items(n);

    cout << "Enter the weight and profit for each item:" << endl;
    for (int i = 0; i < n; i++) {
        cout << "Item " << i + 1 << " (weight profit): ";
        cin >> items[i].weight >> items[i].profit;
    }

    int knapsackCapacity;
    cout << "Enter the knapsack capacity: ";
    cin >> knapsackCapacity;

    double maxProfit = fractionalKnapsack(knapsackCapacity, items);

    cout << "Maximum value that can be obtained: " << maxProfit << endl;

    return 0;
}




Assignmnet  no 4-  Write a program to solve 0-1 knapsack problem using daynamic programming or branch and bound strategy

#include <iostream>
using namespace std;

// Function to solve the 0/1 Knapsack problem
int knapSack(int W, int wt[], int val[], int n) {
    int K[n + 1][W + 1];

    // Build the 2D array K[][] in a bottom-up manner
    for (int i = 0; i <= n; i++) {
        for (int w = 0; w <= W; w++) {
            if (i == 0 || w == 0) {
                // Base case: If no items or no capacity, the value is 0
                K[i][w] = 0;
            } else if (wt[i - 1] <= w) {
                // If the current item can be included, choose the maximum value
                K[i][w] = max(val[i - 1] + K[i - 1][w - wt[i - 1]], K[i - 1][w]);
            } else {
                // If the current item cannot be included, use the value from the previous row
                K[i][w] = K[i - 1][w];
            }
        }
    }

    return K[n][W]; // Return the maximum value that can be obtained
}

int main() {
    int n;
    cout << "Enter the number of items: ";
    cin >> n;

    int val[n], wt[n];
    cout << "Enter the weight and value of each item:" << endl;
    for (int i = 0; i < n; i++) {
        cout << "Item " << i + 1 << " (weight value): ";
        cin >> wt[i] >> val[i];
    }

    int W;
    cout << "Enter the knapsack capacity: ";
    cin >> W;

    int maxProfit = knapSack(W, wt, val, n);

    cout << "Maximum value that can be obtained: " << maxProfit << endl;

    return 0;
}
```





Assignment No 5 :Design n queen matrix where position of first queen is given. Use backtracking

#include <iostream>
using namespace std;

bool isSafe(int board[10][10], int row, int col, int N) {
    // Check if there is a queen in the same column
    for (int i = 0; i < row; i++) {
        if (board[i][col] == 1) {
            return false;
        }
    }

    // Check upper left diagonal
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j] == 1) {
            return false;
        }
    }

    // Check upper right diagonal
    for (int i = row, j = col; i >= 0 && j < N; i--, j++) {
        if (board[i][j] == 1) {
            return false;
        }
    }

    return true;
}

bool solveNQueens(int board[10][10], int N, int row) {
    if (row == N) {
        // All queens are placed successfully.
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                cout << board[i][j] << " ";
            }
            cout << endl;
        }
        cout << endl;
        return true;
    }

    for (int col = 0; col < N; col++) {
        if (isSafe(board, row, col, N)) {
            board[row][col] = 1;
            if (solveNQueens(board, N, row + 1)) {
                board[row][col] = 0; // Backtrack
            }
            else {
                board[row][col] = 0; // Backtrack
            }
        }
    }

    return false;
}

int main() {
    int N;
    cout << "Enter the size of the chessboard (N): ";
    cin >> N;

    if (N < 4) {
        cout << "No solution exists for N < 4." << endl;
    } else {
        int board[10][10] = {0};

        int first_queen_col;
        cout << "Enter the column position of the first queen (0-based): ";
        cin >> first_queen_col;

        if (first_queen_col < 0 || first_queen_col >= N) {
            cout << "Invalid position for the first queen." << endl;
        } else {
            board[0][first_queen_col] = 1;

            if (!solveNQueens(board, N, 1)) {
                cout << "No solution exists." << endl;
            }
        }
    }

    return 0;
}










